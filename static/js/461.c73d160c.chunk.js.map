{"version":3,"file":"static/js/461.c73d160c.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/CountOfContacts/CountOfContacts.styled.js","components/CountOfContacts/CountOfContacts.jsx","components/Message/Message.jsx","pages/Contacts.styled.js","pages/Contacts.jsx","redux/contacts/selectors.js","schemas/contactSchema.js"],"sourcesContent":["import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormThumb = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n  background-color: rgba(202, 202, 202, 0.8);\n  width: 480px;\n  margin: auto;\n  border: 2px outset black;\n  border-radius: 13px;\n  padding: 20px 28px;\n  margin-bottom: 28px;\n\n  /* transform: scale(0.5);\n  opacity: 0.3;\n  transition: transform 1.5s cubic-bezier(0.4, 0, 0.2, 1),\n    opacity 1.5s cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1);\n    opacity: 1;\n  } */\n\n  button {\n    font-weight: bold;\n    margin-bottom: 28px;\n    padding: 4px 8px;\n    border-radius: 22px;\n    text-transform: uppercase;\n    background-color: rgba(144, 144, 144, 0.8);\n  }\n\n  button:hover,\n  button:focus {\n    background-color: black;\n    color: white;\n  }\n\n  label {\n    font-style: oblique;\n    font-weight: 500;\n    margin-bottom: 13px;\n\n    b {\n      font-size: 13px;\n      font-style: normal;\n      font-weight: 500;\n      color: darkred;\n      text-transform: lowercase;\n    }\n\n    input {\n      margin-top: 8px;\n      width: 100%;\n      padding: 2px 13px;\n      border-radius: 13px;\n      outline: none;\n      text-align: center;\n      /* background-color: rgba(255, 255, 255, 0); */\n    }\n  }\n`;\n","import { Formik, Field, ErrorMessage } from 'formik';\n// import * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { fetchAddContact } from 'redux/contacts/operations';\nimport { FormThumb } from './ContactForm.styled';\nimport { contactSchema } from 'schemas/contactSchema';\n\n// const formSchema = Yup.object().shape({\n//   name: Yup.string()\n//     .matches(\n//       /^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$/,\n//       'Wrong name format'\n//     )\n//     .required('Must be filled'),\n//   phone: Yup.string()\n//     .matches(\n//       /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n//       'Wrong number format'\n//     )\n//     .required('Must be filled'),\n// });\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = { name: '', phone: '' };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={contactSchema}\n      onSubmit={(values, actions) => {\n        const enteredName = values.name;\n\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === enteredName.toLowerCase()\n          )\n        ) {\n          alert(`${enteredName} is already in contacts.`);\n          return;\n        }\n\n        dispatch(fetchAddContact({ ...values }));\n        actions.resetForm();\n      }}\n    >\n      <FormThumb>\n        <label>\n          Name\n          <Field name=\"name\" placeholder=\"Enter name\" />\n          <ErrorMessage name=\"name\" component=\"b\" />\n        </label>\n\n        <label>\n          Phone\n          <Field type=\"tel\" name=\"phone\" placeholder=\"Enter phone number\" />\n          <ErrorMessage name=\"phone\" component=\"b\" />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </FormThumb>\n    </Formik>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nexport const ListItem = styled.div`\n  display: flex;\n  /* align-items: center; */\n  color: black;\n  border: 2px outset darkgrey;\n  padding: 6px;\n  border-radius: 18px;\n  cursor: pointer;\n  transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.04);\n  }\n`;\n\nexport const ListItemLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  padding-left: 2px;\n  width: 100%;\n  color: black;\n  text-decoration: none;\n\n  &:visited {\n    color: black;\n  }\n\n  img {\n    display: block;\n    margin: 0;\n    padding: 0;\n    width: 68px;\n    height: 68px;\n    border-radius: 13px;\n    object-fit: cover;\n    background-color: #4e4747;\n  }\n\n  div {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    /* justify-content: space-between; */\n    /* align-items: center; */\n    width: 100%;\n\n    span {\n      /* display: inline-block; */\n      font-size: 18px;\n      font-weight: 700;\n      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n        'Lucida Sans', Arial, sans-serif;\n      margin-left: 13px;\n      margin-right: auto;\n    }\n\n    p {\n      display: block;\n      color: #4e4747;\n      font-weight: 800;\n      margin-left: 13px;\n      margin-right: auto;\n    }\n\n    b {\n      /* margin-right: 48px; */\n      /* color: whitesmoke; */\n      color: midnightblue;\n    }\n  }\n`;\n\nexport const DelBtnItem = styled.button`\n  display: block;\n  font-size: 13px;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n    'Lucida Sans', Arial, sans-serif;\n  padding: 2px 8px;\n  height: fit-content;\n  color: white;\n  background-color: black;\n  border-radius: 13px;\n  transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: transparent;\n    color: buttonborder;\n    transform: scale(1.08);\n  }\n`;\n","import { HiMicrophone } from 'react-icons/hi';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n// import { Link } from 'react-router-dom';\nimport { fetchDeleteContact } from 'redux/contacts/operations';\nimport { ListItemLink, DelBtnItem, ListItem } from './ContactItem.styled';\n// import { deleteContact } from 'redux/contactsSlice';\n// import { deleteContact } from 'redux/actions';\n\nexport default function ContactItem({ contact }) {\n  // const contacts = useSelector(getContacts);\n  const { _id, name, phone, email, avatarURL } = contact;\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  const onContactDelete = () => dispatch(fetchDeleteContact(_id));\n\n  return (\n    <ListItem>\n      <ListItemLink to={`/contacts/${_id}`} state={{ from: location }}>\n        {/* <div style={{ width: '100%', height: '100%' }}> */}\n        <img src={avatarURL} alt=\"Contact's avatar\" />\n        {/* </div> */}\n        <HiMicrophone size={22} />\n        <div>\n          <span>{name}</span>\n          {phone && (\n            <p>\n              phone: <b>{phone}</b>\n            </p>\n          )}\n          {email && (\n            <p>\n              email: <b>{email}</b>\n            </p>\n          )}\n        </div>\n      </ListItemLink>\n      <DelBtnItem type=\"button\" onClick={onContactDelete}>\n        Delete\n      </DelBtnItem>\n    </ListItem>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 666px;\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n  margin: auto;\n  font-weight: 500;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport default function ContactList() {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const sortedContacts = visibleContacts.sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  return (\n    <List>\n      {sortedContacts.map(contact => (\n        <li key={contact._id}>\n          <ContactItem contact={contact} />\n        </li>\n      ))}\n    </List>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Search = styled.div`\n  input {\n    margin-top: 8px;\n    margin-bottom: 22px;\n    width: 480px;\n    padding: 2px 13px;\n    border-radius: 13px;\n    text-align: center;\n    outline: none;\n  }\n\n  ::placeholder {\n    text-align: center;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { searchFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Search } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChangeFilter = newSymbol => {\n    dispatch(searchFilter(newSymbol));\n  };\n\n  return (\n    <Search>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => onChangeFilter(e.target.value)}\n        placeholder=\"Search...\"\n      />\n    </Search>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const ItemsCount = styled.span`\n  display: inline-flex;\n  justify-content: space-between;\n  /* align-items: center; */\n  width: 333px;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 600;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n    'Lucida Sans', Arial, sans-serif;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectTotalContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { ItemsCount } from './CountOfContacts.styled';\n\nexport default function CountOfContacts() {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const totalContacts = useSelector(selectTotalContacts);\n\n  return (\n    <>\n      <ItemsCount>\n        <div>\n          Total contacts:<b> {totalContacts}</b>\n        </div>{' '}\n        <div>\n          Shown contacts:\n          <b> {visibleContacts.length}</b>\n        </div>\n      </ItemsCount>\n    </>\n  );\n}\n","export default function Message({ message }) {\n  return (\n    <>\n      <b>{message}</b>\n    </>\n  );\n}\n","import styled, { createGlobalStyle } from 'styled-components';\nimport ContactsImage from '../images/contacts.jpg';\n\nexport const ContactsGlobalStyle = createGlobalStyle`\nbody{\n      background-image: url(${ContactsImage});\n}`;\n\nexport const ContactsDesk = styled.div`\n  /* @media (min-width: 1280px) {\n    display: flex;\n    gap: 20px;\n  } */\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport CountOfContacts from 'components/CountOfContacts/CountOfContacts';\nimport Message from 'components/Message/Message';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectTotalContacts } from 'redux/contacts/selectors';\nimport { Box } from 'components/GlobalStyle';\nimport { ContactsGlobalStyle, ContactsDesk } from './Contacts.styled';\n// import { Toaster } from 'react-hot-toast';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const totalContacts = useSelector(selectTotalContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Box>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n\n        <h1>Phonebook-Organizer</h1>\n        <ContactsDesk>\n          <ContactForm />\n          <div>\n            <h2>Contacts</h2>\n            <CountOfContacts />\n            <Filter />\n            {totalContacts === 0 ? (\n              <Message message=\"Oops! Contact's list is empty...\" />\n            ) : (\n              <ContactList />\n            )}\n          </div>\n        </ContactsDesk>\n        <ContactsGlobalStyle />\n        {/* <Toaster /> */}\n      </Box>\n    </HelmetProvider>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectTotalContacts = state => state.contacts.items.length;\n\nexport const selectContactsStatus = state => state.contacts.isLoading;\n\nexport const selectContactsError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterField) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterField.toLowerCase())\n    )\n);\n","import * as Yup from 'yup';\n\nexport const contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$/,\n      'Wrong name format'\n    )\n    .required('Must be filled'),\n  phone: Yup.string(),\n  // .matches(\n  //   /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n  //   'Wrong number format'\n  // )\n  // .required('Must be filled'),\n});\n"],"names":["FormThumb","styled","Form","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","_jsx","Formik","initialValues","name","phone","validationSchema","contactSchema","onSubmit","values","actions","enteredName","some","contact","toLowerCase","alert","fetchAddContact","resetForm","children","_jsxs","Field","placeholder","ErrorMessage","component","type","ListItem","ListItemLink","Link","DelBtnItem","ContactItem","_ref","_id","email","avatarURL","location","useLocation","to","state","from","src","alt","HiMicrophone","size","onClick","onContactDelete","fetchDeleteContact","List","ContactList","sortedContacts","selectVisibleContacts","sort","a","b","localeCompare","map","Search","Filter","filter","selectFilter","value","onChange","e","onChangeFilter","newSymbol","target","searchFilter","ItemsCount","CountOfContacts","visibleContacts","totalContacts","selectTotalContacts","_Fragment","length","Message","message","ContactsGlobalStyle","createGlobalStyle","ContactsImage","ContactsDesk","Contacts","useEffect","fetchContacts","HelmetProvider","Box","Helmet","items","createSelector","filterField","includes","Yup","shape","matches","required"],"sourceRoot":""}