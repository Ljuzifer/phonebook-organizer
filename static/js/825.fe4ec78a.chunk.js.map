{"version":3,"file":"static/js/825.fe4ec78a.chunk.js","mappings":"yLAEO,MAAMA,EAAYC,EAAAA,GAAAA,GAAU;;;;;;;;;;;;EActBC,EAAOD,EAAAA,GAAAA,CAAQ;;;;EAMfE,EAAYF,EAAAA,GAAAA,MAAa;;;;;;;;;;;;;;;;EAkBzBG,EAAWH,EAAAA,GAAAA,KAAY;;;;;yBCpCrB,SAASI,EAAQC,GAA2B,IAA1B,GAAEC,EAAE,KAAEC,EAAI,UAAEC,GAAWH,EACtD,MAAMI,GAAWC,EAAAA,EAAAA,MAOjB,OACEC,EAAAA,EAAAA,MAACZ,EAAS,CAAAa,SAAA,EACRC,EAAAA,EAAAA,KAACV,EAAQ,CAACW,KAAK,WAAWC,QAASP,EAAWQ,SAL7BC,IACnBR,GAASS,EAAAA,EAAAA,IAAgB,CAAEC,OAAQb,EAAIE,kBAKrCK,EAAAA,EAAAA,KAACZ,EAAI,CAAAW,SAAEL,KACPM,EAAAA,EAAAA,KAACX,EAAS,CAACY,KAAK,SAASM,QAVRC,KACnBZ,GAASa,EAAAA,EAAAA,IAAgBhB,GAAI,EASoBM,SAAC,aAKtD,CCnBO,MAAMW,EAAOvB,EAAAA,GAAAA,EAAS;;;;;;;ECFhBwB,EAAiBC,GAASA,EAAMC,MAAMC,MCKpC,SAASC,IACtB,MAAMF,GAAQG,EAAAA,EAAAA,IAAYL,GAG1B,OAFAM,QAAQC,IAAIL,IAGVb,EAAAA,EAAAA,KAACU,EAAI,CAAAX,SACFc,EAAMM,KAAI3B,IAAA,IAAC,IAAE4B,EAAG,KAAE1B,EAAI,UAAEC,GAAWH,EAAA,OAClCQ,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACT,EAAQ,CAACE,GAAI2B,EAAK1B,KAAMA,EAAMC,UAAWA,KADnCyB,EAEJ,KAIb,CChBO,MAAMC,EAAWlC,EAAAA,GAAAA,IAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECEpB,SAASmC,IACtB,MAAM1B,GAAWC,EAAAA,EAAAA,MAejB,OACEC,EAAAA,EAAAA,MAACuB,EAAQ,CAACE,SAdSC,IACnBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,cACTjC,EAAOgC,EAAKE,SAASlC,KAAKmC,MAEhC,GAAa,KAATnC,EAGF,OAFAE,GAASkC,EAAAA,EAAAA,IAAa,CAAEpC,eACxBgC,EAAKK,QAGPC,MAAM,yCAAyC,EAIdjC,SAAA,EAE/BC,EAAAA,EAAAA,KAAA,SAAOP,GAAG,OAAOwC,KAAK,OAAOC,YAAY,qBACzClC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,eAG5B,C,0DCxBaoC,EAAmBC,EAAAA,EAAiB;;;;4BAIrBC;;0BCIb,SAASC,IACtB,MAAM1C,GAAWC,EAAAA,EAAAA,MAMjB,OAJA0C,EAAAA,EAAAA,YAAU,KACR3C,GAAS4C,EAAAA,EAAAA,MAAa,GACrB,CAAC5C,KAGFI,EAAAA,EAAAA,KAACyC,EAAAA,GAAc,CAAA1C,UACbD,EAAAA,EAAAA,MAAC4C,EAAAA,EAAG,CAAA3C,SAAA,EACFC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAM,CAAA5C,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,kBAGTC,EAAAA,EAAAA,KAACsB,EAAU,KACXtB,EAAAA,EAAAA,KAACe,EAAQ,KACTf,EAAAA,EAAAA,KAACmC,EAAgB,QAIzB,C","sources":["components/TaskItem/TaskItem.styled.js","components/TaskItem/TaskItem.jsx","components/TaskList/TaskList.styled.js","redux/tasks/selectors.js","components/TaskList/TaskList.jsx","components/TaskEditor/TaskEditor.styled.js","components/TaskEditor/TaskEditor.jsx","pages/Tasks.styled.js","pages/Tasks.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const TaskThumb = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  border: 2px outset darkgrey;\n  padding: 2px;\n  border-radius: 18px;\n  transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.08);\n  }\n`;\n\nexport const Text = styled.b`\n  text-align: initial;\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const DelButton = styled.button`\n  font-size: 13px;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n    'Lucida Sans', Arial, sans-serif;\n  margin-left: auto;\n  padding: 2px 8px;\n  color: white;\n  background-color: black;\n  border-radius: 13px;\n  transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: transparent;\n    color: buttonborder;\n    transform: scale(1.1);\n  }\n`;\n\nexport const Checkbox = styled.input`\n  margin-left: 8px;\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Checkbox, DelButton, TaskThumb, Text } from './TaskItem.styled';\nimport { fetchDeleteTask, fetchToggleTask } from 'redux/tasks/operations';\n\nexport default function TaskItem({ id, text, completed }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(fetchDeleteTask(id));\n  };\n  const handleToggle = () =>\n    dispatch(fetchToggleTask({ taskId: id, completed }));\n\n  return (\n    <TaskThumb>\n      <Checkbox type=\"checkbox\" checked={completed} onChange={handleToggle} />\n      <Text>{text}</Text>\n      <DelButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </DelButton>\n    </TaskThumb>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 12px;\n`;\n","export const selectAllTasks = state => state.tasks.items;\n","import TaskItem from 'components/TaskItem/TaskItem';\nimport { List } from './TaskList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectAllTasks } from 'redux/tasks/selectors';\n\nexport default function TaskList() {\n  const tasks = useSelector(selectAllTasks);\n  console.log(tasks);\n\n  return (\n    <List>\n      {tasks.map(({ _id, text, completed }) => (\n        <li key={_id}>\n          <TaskItem id={_id} text={text} completed={completed} />\n        </li>\n      ))}\n    </List>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const EditForm = styled.form`\n  display: flex;\n  gap: 13px;\n  background-color: rgba(202, 202, 202, 0.8);\n  width: 100%;\n  margin: auto;\n  border: 2px outset black;\n  border-radius: 13px;\n  padding: 20px;\n  margin-bottom: 28px;\n\n  button {\n    font-weight: bold;\n    width: 120px;\n    height: 48px;\n    padding: 4px 8px;\n    border-radius: 13px;\n    text-transform: uppercase;\n    background-color: rgba(144, 144, 144, 0.8);\n  }\n\n  button:hover,\n  button:focus {\n    background-color: black;\n    color: white;\n  }\n\n  input {\n    /* margin-top: 8px; */\n    width: 100%;\n    padding: 2px 13px;\n    border-radius: 13px;\n    outline: none;\n    /* text-align: center; */\n    /* background-color: rgba(255, 255, 255, 0); */\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { EditForm } from './TaskEditor.styled';\nimport { fetchAddTask } from 'redux/tasks/operations';\n\nexport default function TaskEditor() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n\n    if (text !== '') {\n      dispatch(fetchAddTask({ text }));\n      form.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <EditForm onSubmit={handleSubmit}>\n      {/* <label htmlFor=\"task\" name=\"text\"></label> */}\n      <input id=\"task\" name=\"text\" placeholder=\"Enter your task\" />\n      <button type=\"submit\">Add task</button>\n    </EditForm>\n  );\n}\n","import { createGlobalStyle } from 'styled-components';\nimport tasksImage from '../images/tasks.jpg';\n\nexport const TasksGlobalStyle = createGlobalStyle`\nbody{\n    /* background-image: url('https://kartinki.pics/uploads/posts/2021-07/1625655357_41-kartinkin-com-p-biblioteka-art-art-krasivo-46.jpg'); */\n\n    background-image: url(${tasksImage});\n}\n`;\n","// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport TaskList from 'components/TaskList/TaskList';\nimport TaskEditor from 'components/TaskEditor/TaskEditor';\nimport { TasksGlobalStyle } from './Tasks.styled';\nimport { Box } from 'components/GlobalStyle';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasks } from 'redux/tasks/operations';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Box>\n        <Helmet>\n          <title>Your tasks</title>\n        </Helmet>\n\n        <TaskEditor />\n        <TaskList />\n        <TasksGlobalStyle />\n      </Box>\n    </HelmetProvider>\n  );\n}\n"],"names":["TaskThumb","styled","Text","DelButton","Checkbox","TaskItem","_ref","id","text","completed","dispatch","useDispatch","_jsxs","children","_jsx","type","checked","onChange","handleToggle","fetchToggleTask","taskId","onClick","handleDelete","fetchDeleteTask","List","selectAllTasks","state","tasks","items","TaskList","useSelector","console","log","map","_id","EditForm","TaskEditor","onSubmit","e","preventDefault","form","currentTarget","elements","value","fetchAddTask","reset","alert","name","placeholder","TasksGlobalStyle","createGlobalStyle","tasksImage","Tasks","useEffect","fetchTasks","HelmetProvider","Box","Helmet"],"sourceRoot":""}